{"version":3,"sources":["Utilities/APIUtils.js","Components/CreateUser.js","App.js","serviceWorker.js","index.js"],"names":["LoginUser","_LoginUser","apply","this","arguments","_callee4","username","password","hashedPassword","data","headers","regenerator_default","a","wrap","_context4","prev","next","document","getElementById","value","passwordHash","generate","Headers","append","fetch","method","body","JSON","stringify","stop","CreateUser","react_default","createElement","id","placeholder","type","onClick","Component","App","className","Components_CreateUser","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAuEO,SAAeA,IAAtB,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACCV,EAAWW,SAASC,eAAe,YAAYC,MAC/CZ,EAAWU,SAASC,eAAe,YAAYC,MAE/CX,EAAiBY,IAAaC,SAASd,GAEvCE,EAAO,CACXH,SAAUA,EACVC,SAAUC,IAGRE,EAAU,IAAIY,SAEVC,OAAO,eAAgB,oBAC/Bb,EAAQa,OAAO,SAAU,oBAdpBT,EAAAE,KAAA,EAgBCQ,MAAM,2DAA4D,CACtEC,OAAQ,OACRC,KAAMC,KAAKC,UAAUnB,GACrBC,QAASA,IAnBN,wBAAAI,EAAAe,SAAAxB,iCCxDQyB,mLAVP,OACIC,EAAAnB,EAAAoB,cAAA,WACID,EAAAnB,EAAAoB,cAAA,SAAOC,GAAG,WAAWC,YAAY,WAAWC,KAAK,SACjDJ,EAAAnB,EAAAoB,cAAA,SAAOC,GAAG,WAAWC,YAAY,WAAWC,KAAK,aACjDJ,EAAAnB,EAAAoB,cAAA,UAAQI,QAASpC,GAAjB,kBANSqC,aCSVC,MATf,WAEE,OACEP,EAAAnB,EAAAoB,cAAA,OAAKO,UAAU,OACfR,EAAAnB,EAAAoB,cAACQ,EAAD,QCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAnB,EAAAoB,cAACgB,EAAD,MAAS/B,SAASC,eAAe,SD2H3C,kBAAmB+B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c31b2c9.chunk.js","sourcesContent":["import passwordHash from 'password-hash';\r\n\r\nexport async function CreateUser(){\r\n    const username = document.getElementById(\"username\").value;\r\n    const password = document.getElementById(\"password\").value;\r\n\r\n    const hashedPassword = passwordHash.generate(password);\r\n\r\n    const data = {\r\n      username: username,\r\n      password: hashedPassword\r\n    }\r\n\r\n    let headers = new Headers();\r\n\r\n    headers.append('Content-Type', 'application/json');\r\n    headers.append('Accept', 'application/json');\r\n\r\n    await fetch('https://lessoninsteamservices.azurewebsites.net/Register', {\r\n      method: \"POST\",\r\n      body: JSON.stringify(data),\r\n      headers: headers\r\n    })\r\n}\r\n\r\nexport async function DeleteUser(){\r\n  const username = document.getElementById(\"username\").value;\r\n  const password = document.getElementById(\"password\").value;\r\n\r\n  const hashedPassword = passwordHash.generate(password);\r\n\r\n  const data = {\r\n    username: username,\r\n    password: hashedPassword\r\n  }\r\n\r\n  let headers = new Headers();\r\n\r\n  headers.append('Content-Type', 'application/json');\r\n  headers.append('Accept', 'application/json');\r\n\r\n  await fetch('https://lessoninsteamservices.azurewebsites.net/Register', {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    headers: headers\r\n  })\r\n}\r\n\r\nexport async function UpdateUser(){\r\n  const username = document.getElementById(\"username\").value;\r\n  const password = document.getElementById(\"password\").value;\r\n\r\n  const hashedPassword = passwordHash.generate(password);\r\n\r\n  const data = {\r\n    username: username,\r\n    password: hashedPassword\r\n  }\r\n\r\n  let headers = new Headers();\r\n\r\n  headers.append('Content-Type', 'application/json');\r\n  headers.append('Accept', 'application/json');\r\n\r\n  await fetch('https://lessoninsteamservices.azurewebsites.net/Register', {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    headers: headers\r\n  })\r\n}\r\n\r\nexport async function LoginUser(){\r\n  const username = document.getElementById(\"username\").value;\r\n  const password = document.getElementById(\"password\").value;\r\n\r\n  const hashedPassword = passwordHash.generate(password);\r\n\r\n  const data = {\r\n    username: username,\r\n    password: hashedPassword\r\n  }\r\n\r\n  let headers = new Headers();\r\n\r\n  headers.append('Content-Type', 'application/json');\r\n  headers.append('Accept', 'application/json');\r\n\r\n  await fetch('https://lessoninsteamservices.azurewebsites.net/Register', {\r\n    method: \"POST\",\r\n    body: JSON.stringify(data),\r\n    headers: headers\r\n  })\r\n}","import React, { Component } from 'react';\r\nimport { LoginUser } from '../Utilities/APIUtils.js'\r\n\r\nclass CreateUser extends Component {\r\n  render(){\r\n        return(\r\n            <div>\r\n                <input id=\"username\" placeholder=\"Username\" type=\"text\"></input>\r\n                <input id=\"password\" placeholder=\"Password\" type=\"password\"></input>\r\n                <button onClick={LoginUser}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateUser;","import React from 'react';\nimport CreateUser from './Components/CreateUser';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <CreateUser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}